# Configuration file
# key = value
# Logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true
quarkus.http.port=8082


mp.messaging.outgoing.Inventory-data-topic.connector=smallrye-kafka
mp.messaging.outgoing.Inventory-data-topic.topic=inventory-topic
mp.messaging.outgoing.Inventory-data-topic.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.Inventory-data-topic.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

mp.messaging.incoming.Item-data-topic.connector=smallrye-kafka
mp.messaging.incoming.Item-data-topic.topic=item-topic
mp.messaging.incoming.Item-data-topic.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.Item-data-topic.value.deserializer=com.ibm.garage.cpat.deserializer.ItemDeserializer
mp.messaging.incoming.Item-data-topic.group.id=Item-manipulator

mp.messaging.incoming.Inventory-data-topic-incoming.connector=smallrye-kafka
mp.messaging.incoming.Inventory-data-topic-incoming.topic=inventory-topic
mp.messaging.incoming.Inventory-data-topic-incoming.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.Inventory-data-topic-incoming.value.deserializer=com.ibm.garage.cpat.deserializer.InventoryDeserializer
mp.messaging.incoming.Inventory-data-topic-incoming.group.id=inventory-Reader

mp.messaging.outgoing.Item-data-topic-outgoing.connector=smallrye-kafka
mp.messaging.outgoing.Item-data-topic-outgoing.topic=item-topic
mp.messaging.outgoing.Item-data-topic-outgoing.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.Item-data-topic-outgoing.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

#### Config shared between all kafka connections
# bootstrap server is the only config needed for plain insercure local kafka instance
mp.messaging.connector.smallrye-kafka.bootstrap.servers=${BOOTSTRAP_SERVERS}
# If connecting to Event Streams on IBM Cloud or to any Kafka deployment with SSL security
mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
mp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2
mp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN
# Make sure you set the username and API key at the end
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password=${API_KEY};

# If connecting to Event Streams in OpenShift that requires certificates
# Location for the truststore within the container
# #change to es-cert.jks folder] full path
mp.messaging.connector.smallrye-kafka.ssl.truststore.location=${CERT_LOCATION}
# # Password for the truststore
mp.messaging.connector.smallrye-kafka.ssl.truststore.password=password
